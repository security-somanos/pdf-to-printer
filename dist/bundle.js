!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var i in n)("object"==typeof exports?exports:e)[i]=n[i]}}(global,(function(){return(()=>{"use strict";var e={n:t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},d:(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},t={};e.r(t),e.d(t,{getDefaultPrinter:()=>j,getPrinters:()=>P,print:()=>x});const n=require("path");var i=e.n(n);const r=require("fs");var o=e.n(r);const a=require("child_process"),s=require("util");var c=e.n(s);const u=c().promisify(a.execFile),l="electron"in process.versions&&process.mainModule&&process.mainModule.filename.includes("app.asar"),d=require("os");var p=e.n(d);function f(){if("win32"!==p().platform())throw"Operating System not supported"}const h=["odd","even"],v=["portrait","landscape"],m=["noscale","shrink","fit"],y=["duplex","duplexshort","duplexlong","simplex"],w=["A2","A3","A4","A5","A6","letter","legal","tabloid","statement"];function x(e,t={}){return n=this,r=void 0,s=function*(){if(f(),!e)throw"No PDF specified";if(!o().existsSync(e))throw"No such file";let n=t.sumatraPdfPath||i().join(__dirname,"SumatraPDF.exe");var r;t.sumatraPdfPath||(r=n,n=l?r.replace("app.asar","app.asar.unpacked"):r);const a=[],{printer:s,silent:c,printDialog:d}=t;d?a.push("-print-dialog"):(s?a.push("-print-to",s):a.push("-print-to-default"),!1!==c&&a.push("-silent"));const p=function(e){const{pages:t,subset:n,orientation:i,scale:r,monochrome:o,side:a,bin:s,paperSize:c,copies:u}=e,l=[];if(t&&l.push(t),n){if(!h.includes(n))throw`Invalid subset provided. Valid names: ${h.join(", ")}`;l.push(n)}if(i){if(!v.includes(i))throw`Invalid orientation provided. Valid names: ${v.join(", ")}`;l.push(i)}if(r){if(!m.includes(r))throw`Invalid scale provided. Valid names: ${m.join(", ")}`;l.push(r)}if(o?l.push("monochrome"):!1===o&&l.push("color"),a){if(!y.includes(a))throw`Invalid side provided. Valid names: ${y.join(", ")}`;l.push(a)}if(s&&l.push(`bin=${s}`),c){if(!w.includes(c))throw`Invalid paper size provided. Valid names: ${w.join(", ")}`;l.push(`paper=${c}`)}return u&&l.push(`${u}x`),l}(t);p.length&&a.push("-print-settings",p.join(",")),a.push(e);try{yield u(n,a)}catch(e){throw e}},new((a=void 0)||(a=Promise))((function(e,t){function i(e){try{c(s.next(e))}catch(e){t(e)}}function o(e){try{c(s.throw(e))}catch(e){t(e)}}function c(t){var n;t.done?e(t.value):(n=t.value,n instanceof a?n:new a((function(e){e(n)}))).then(i,o)}c((s=s.apply(n,r||[])).next())}));var n,r,a,s}const g=c().promisify(a.exec);function b(e){const t={deviceId:"",name:""},[,n,i]=e.split(",").map((e=>e.trim()));return t.deviceId=n,t.name=i,{isValid:!(!t.deviceId||!t.name),printerData:t}}const P=function(){return e=this,t=void 0,i=function*(){try{f();const{stdout:e}=yield g("cmd.exe /c wmic printer get name,deviceid /format:csv");return yield function(e){const t=[];return e.split("\n").slice(2).map((e=>e.trim())).filter((e=>!!e)).forEach((e=>{const{isValid:n,printerData:i}=b(e);n&&t.push(i)})),t}(e)}catch(e){throw e}},new((n=void 0)||(n=Promise))((function(r,o){function a(e){try{c(i.next(e))}catch(e){o(e)}}function s(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((i=i.apply(e,t||[])).next())}));var e,t,n,i};const j=function(){return e=this,t=void 0,i=function*(){try{f();const{stdout:e}=yield g('wmic printer where default="TRUE" get deviceid,name /format:csv');if(!e)return null;const t=e.split("\r\r\n");if(t.length<3)return null;const n=t[2],{isValid:i,printerData:r}=b(n);return i?r:null}catch(e){throw e}},new((n=void 0)||(n=Promise))((function(r,o){function a(e){try{c(i.next(e))}catch(e){o(e)}}function s(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}c((i=i.apply(e,t||[])).next())}));var e,t,n,i};return t})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,